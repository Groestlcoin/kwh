/** @format */

const cuid = require('cuid')
const ContentEditable = require('react-contenteditable').default

import React, {useState, useEffect, useContext, useRef} from '../react' // eslint-disable-line
import {browser} from '../browser'
import {CurrentContext} from '../popup-context'
import ShowInvoice from './ShowInvoice'

export default function Invoice() {
  const contentEditable = useRef()

  let {action, tab} = useContext(CurrentContext)

  let defaultAmount =
    action.defaultAmount || action.maximumAmount || action.minimumAmount || 100
  let amountFixed = !!action.amount

  let [bolt11, setBolt11] = useState(action.invoice)
  let [satoshis, setSatoshis] = useState(action.amount || defaultAmount)
  let [desc, setDesc] = useState(
    action.defaultMemo ||
      (action.origin
        ? `KwH invoice on ${action.origin.domain}`
        : `Generated by KwH`)
  )

  function makeInvoice(e) {
    e.preventDefault()

    let label = `KwH.${cuid.slug()}`

    browser.runtime
      .sendMessage({
        tab,
        rpc: true,
        method: 'invoice',
        params: [satoshis * 1000, label, desc.replace(/&nbsp;/g, '').trim()],
        behaviors: {
          success: [
            'paste-invoice',
            'return-invoice',
            'wait-for-invoice',
            'cleanup-browser-action',
            'save-invoice-to-current-action'
          ],
          failure: ['notify-invoice-error', 'cleanup-browser-action']
        },
        extra: {
          newInvoiceLabel: label
        }
      })
      .then(({bolt11}) => {
        setBolt11(bolt11)
      })
  }

  let inputClasses = 'dark-pink hover-gold code b f6 bg-transparent pa1'

  return (
    <div className="lh-copy wrap tl measure w5 pa2">
      {bolt11 ? (
        <ShowInvoice invoice={bolt11} />
      ) : (
        <form onSubmit={makeInvoice}>
          <div>
            Making an invoice of
            {amountFixed ? (
              <span className={inputClasses}>{action.amount}</span>
            ) : (
              <input
                className={inputClasses + ' ml1 mr1 bn bg-transparent w3'}
                value={satoshis}
                onChange={e => setSatoshis(e.target.value)}
                step="10"
                min={action.minimumAmount || 1}
                max={action.maximumAmount || Infinity}
              />
            )}
            satoshis described as{' '}
            <ContentEditable
              innerRef={contentEditable}
              html={desc}
              className={inputClasses + ' bn wrap'}
              onChange={e => setDesc(e.target.value)}
              tagName="span"
            />
            .
          </div>
          <div className="flex justify-end">
            <button className="db bg-animate bg-light-pink bn button-reset f6 hover-bg-gold ma2 p2 pa2 pointer white">
              Generate
            </button>
          </div>
        </form>
      )}
    </div>
  )
}
